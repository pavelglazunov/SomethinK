"""

все команды нужно реализовать через слэш -> @bot.slash_command(name="command", description="amogus")
в команды могут передаваться аргументы, если перед аргументом стоит ?, то от считается необязательным

-- отдельные команды с обычным вводом/выводом --
    - moderation -
    /ban <member> <?reason> -> бан участника
    /unban <member> <?reason> -> снять бан с участника
    /mute <member> <?reason> -> мут участника
    /unmute <member> <?reason> -> снять мут участника
    /chatmute <member> <?reason> -> мут участника в чате
    /chatunmute <member> <?reason> -> снять мут участника в чате
    /timeout <member> <time> <?reason> -> выдать таймаут участнику
    /rmtimeout <member> <?reason> -> удалить таймаут у участнику
    /fullban <member> <?reason> -> бан + удалить все сообщения пользователя
    /clear <count>  -> удалить count сообщений
    /afk <member> -> переместить участника в афк канал (id афк канала находиться в файле config.py в переменной AFK_CHANNEL_ID)
    /move <member> <channel> ->  переместить участника в указанный канал
    /deafen <member> <?reason> -> выключить звук пользователю
    /undeafen <member> <?reason> -> включить звук пользователю
    /addrole <member> <role> -> выдать роль пользователю
    /rmrole <member> <role> -> забрать роль у пользователя
    /ping -> вывести ping сервера и бота
    /slowmode <status> -> включить/выключить медленный режим в статусе реализовать выбор on/off соответственно
    /vkick <member> <?reason> -> исключить пользователя из голосового канала

- another -
    /color <color> -> изменить цвет имени в чате (выдача (при необходимости создание) роли с указанным цветом)
    /nick <name> -> изменить имя в чате
    /joke -> случайная шутка
    /weather <city> -> получение погоды из указанного города через сайты с открытым API, API ключ храниться в файле config.py в переменной WEATHER_API_KEY
/gpt <text> -> обращение к chatGPT, API ключ храниться в файле config.py в переменной CHATGPT_API_KEY
    /translate <from> <to> <text> -> перевод текста с языка from на to, при необходимости можно использовать API
    /say <text> -> написать текст от имени бота
    /avatar <member> -> получить аватар пользователя



    -- команды, которые взаимодействуют друг с другом --
    /warn <member> <?reason> -> выдать предупреждение пользователю, все предупреждения хранятся в data/user_warnings.json в формате:
    {
        user1: [
            {
                "text": "текст предупреждения",
                "time": "точное время выдачи",
                "from": "кем выдано"
            }]
    }
    /warns <member> -> просмотр всех предупреждений пользователя
    /rmwarn <member> -> снять все предупреждения с пользователя

-- команды с окном ввода --
команды ниже использую всплывающие окна для ввода информации, документация по таким окнам: https://guide.disnake.dev/interactions/modals
    /report -> в всплывающем окне запрашиваются: имя отправителя, на кого отправить жалобу и текст сообщения, после этого оформленный embed с этими данными отправляется в специальный канал (id канала находиться в файле config.py в переменной REPORT_CHANNEL_ID)
    /embed -> в всплывающем окне запрашиваются: заголовок, тело, автор, цвет (в любом формате), текст футера, после чего команда отправляет готовый embed
    /feedback -> в всплывающем окне запрашиваются: от кого, текст, тип

- settings -
    /ar_update <interval: int>  -> изменить значение ar_interval в файле data/config.json на введенное, сохранить изменения
    /log <status> -> включить/выключить логирование


-- не команды --
нужно реализовать функционал автомодерации, при обнаружении выполнять одно из действий ниже
возможные действия:
--send -> удалить сообщение, сохранив его текст в data/waiting_messages.json, отправить сообщение в специальный канал (ID канала находиться в файле config.py в переменной WAITING_MESSAGES_CHANNEL_ID),
к сообщению добавить кнопки "удалить" и "одобрить", которые будут удалять сообщение из waiting_messages.json или отправлять сообщения в первоначальный канал, удаляя из waiting_messages.json соответственно
--remove -> удалить сообщение
--warn -> выдать предупреждение пользователю
--remove-warn -> удалить сообщение и выдать предупреждение пользователю

автомодерация:
1) проверка всех сообщений на наличие ссылок в них. При обнаружение ссылки выполнить одно из действий выше, действие указанно в config.py в переменной LINKS_DETECT_ACTION
игнорировать сообщения из каналов, указанных в config.py в списке IGNORE_LINKS_CHANNELS
игнорировать сообщения ролей, указанных в config.py в списке IGNORE_LINKS_ROLES
2) проверка всех сообщений на наличие смайликов в них. Если длина сообщения больше EMOJI_MIN_MESSAGE_LENGTH (config.py) и процент эмодзи больше чем EMOJI_MIN_PERCENT (config.py) выполнить одно из действий выше, действие указанно в config.py в переменной EMOJI_DETECT_ACTION
игнорировать сообщения из каналов, указанных в config.py в списке IGNORE_EMOJI_CHANNELS
игнорировать сообщения ролей, указанных в config.py в списке IGNORE_EMOJI_ROLES
3) проверка всех сообщений на наличие капса в них. Если длина сообщения больше CAPS_MIN_MESSAGE_LENGTH (config.py) и процент эмодзи больше чем CAPS_MIN_PERCENT (config.py) выполнить одно из действий выше, действие указанно в config.py в переменной CAPS_DETECT_ACTION
игнорировать сообщения из каналов, указанных в config.py в списке IGNORE_CAPS_CHANNELS
игнорировать сообщения ролей, указанных в config.py в списке IGNORE_CAPS_ROLES
4) проверка всех сообщений на наличие упоминаний пользователей или каналов в них. Если количество упоминаний больше чем MENTIONS_MIN_COUNT (config.py) выполнить одно из действий выше, действие указанно в config.py в переменной MENTION_DETECT_ACTION
игнорировать сообщения из каналов, указанных в config.py в списке IGNORE_MENTIONS_CHANNELS
игнорировать сообщения ролей, указанных в config.py в списке IGNORE_MENTIONS_ROLES


-- функции --
логирование
команды: (дата) -- (кто) использует команду (команда) с аргументами: (*args) в канале (канал)
автомод: (дата) -- Обнаружено (причина) в канале (канал) действие: (действие)
статистика: (дата) -- статистика обновлена. Созданы: (каналы, роли, голосовые каналы, ...). Удалены: (...)
автоответчик: (дата) -- Сработал автоответчик, триггер: (триггер)
рег. сообщения: (дата) -- отправлено рег сообщение
роли активности: (дата) -- обновлены
оповещения: (дата) -- Оповещение с (откуда), канал: (ссылка)
событие: (дата) -- участник (участник) присоединился/вышел

что-то
дата -- статус, тип, Что случилось, аргументы, автор, канал, детали

    роли активности

    регулярный сообщения (отправляются в определенный канал, в определенное время) -> regular
    события при заходе/выходе участника
    автоответчик
    авто-выдача ролей пи заходе на сервер
    роли активности -> regular
социальные сети (ютуб, твич)
статистика


новые команды для сайта:



изменить роли активности, добавить возможность создавать роли активности, удалить PyCharm, CLion ...
Протестировать роли активности
Добавить проверку на фронтенде ссылки или имени твич

Автоматическое создание каналов:
- статистика
- репорты (если не указан ID)
- афк (если не указа ID)
- подозрительные сообщения
- логи


переделать _messages, убрать ООП оставить только функции

убрать из afk ввод канала (фронтенд)


индивидуальный вывод в /report, /embed, /feedback | /color

поменять сайт анекдотов
"""